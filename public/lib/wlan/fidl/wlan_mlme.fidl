// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library wlan_mlme;

// Stub types for communicating between the wlan service and the MLME drivers. Based on the 802.11
// MLME SAP interface (IEEE Std 802.11-2016 section 6.3).

// TODO(NET-631): restore the commented out enum aliases

// MLME-SCAN.request (IEEE Std 802.11-2016 6.3.3.2)

enum BSSTypes {
    INFRASTRUCTURE = 1;
    PERSONAL = 2;
    INDEPENDENT = 3;
    MESH = 4;
    ANY_BSS = 5;
    //LAST = ANY_BSS;
};

enum ScanTypes {
    ACTIVE = 1;
    PASSIVE = 2;
    //LAST = PASSIVE;
};

// LINT analyzer keyword intended for humans:
// LINT.IfChange
enum CBW {	// Channel Bandwidth
    CBW20 = 0;
    CBW40 = 1;
    //CBW40ABOVE = CBW40;
    CBW40BELOW = 2;
    CBW80 = 3;
    CBW160 = 4;
    CBW80P80 = 5;

    CBW_COUNT = 6;
};

struct WlanChan {
    uint8 primary;
    CBW cbw;
    uint8 secondary80;
};
// LINT.ThenChange(//garnet/lib/wlan/protocol/include/wlan/protocol/mac.h)

struct ScanRequest {
    BSSTypes bss_type;
    array<uint8>:6 bssid;
    string ssid;
    ScanTypes scan_type;
    uint32 probe_delay;  // in TimeUnits
    vector<uint8>? channel_list;
    uint32 min_channel_time;  // in TimeUnits
    uint32 max_channel_time;  // in TimeUnits
    // RequestInformation
    vector<string>? ssid_list;
    // ChannelUsage
    // AccessNetworkType
    // HESSID
    // Mesh ID
    // DiscoveryMode
    // VendorSpecificInfo
};


// MLME-SCAN.confirm (IEEE Std 802.11-2016 6.3.3.3)

struct BSSDescription {
    array<uint8>:6 bssid;
    string ssid;
    BSSTypes bss_type;
    uint32 beacon_period;  // in TimeUnits
    uint32 dtim_period;
    uint64 timestamp;
    uint64 local_time;
    // TODO(hahnr): This field represents an IE and should thus be named RSNE.
    vector<uint8>? rsn;

    WlanChan chan;

    // For the following measurements, 255 means measurement not available.
    uint8 rssi_measurement;  // not in the standard
    uint8 rcpi_measurement;
    uint8 rsni_measurement;
    // etc
};

enum ScanResultCodes {
    SUCCESS = 0;
    NOT_SUPPORTED = 1;
    //LAST = NOT_SUPPORTED;
};

struct ScanConfirm {
    vector<BSSDescription> bss_description_set;
    // BSSDescriptionFromMeasurementPilotSet
    ScanResultCodes result_code;
};

// MLME-JOIN.request (IEEE Std 802.11-2016, 6.3.4.2)

struct JoinRequest {
    BSSDescription selected_bss;
    uint32 join_failure_timeout;
    uint32 nav_sync_delay;
    vector<uint16> op_rate_set;

    // etc
};

// MLME-JOIN.confirm (IEEE Std 802.11-2016, 6.3.4.3)

enum JoinResultCodes {
    SUCCESS = 0;
    JOIN_FAILURE_TIMEOUT = 1;
    //LAST = JOIN_FAILURE_TIMEOUT;
};

struct JoinConfirm {
    JoinResultCodes result_code;
};

// MLME-AUTHENTICATE.request (IEEE Std 802.11-2016, 6.3.5.2)

enum AuthenticationTypes {
    OPEN_SYSTEM = 1;
    SHARED_KEY = 2;
    FAST_BSS_TRANSITION = 3;
    SAE = 4;
    //LAST = SAE;
};

struct AuthenticateRequest {
    array<uint8>:6 peer_sta_address;
    AuthenticationTypes auth_type;
    uint32 auth_failure_timeout;

    // etc
};

// MLME-AUTHENTICATE.confirm (IEEE Std 802.11-2016, 6.3.5.3)

enum AuthenticateResultCodes {
    SUCCESS = 0;
    REFUSED = 1;
    ANTI_CLOGGING_TOKEN_REQUIRED = 2;
    FINITE_CYCLIC_GROUP_NOT_SUPPORTED = 3;
    AUTHENTICATION_REJECTED = 4;
    AUTH_FAILURE_TIMEOUT = 5;
    //LAST = AUTH_FAILURE_TIMEOUT;
};

struct AuthenticateConfirm {
    array<uint8>:6 peer_sta_address;
    AuthenticationTypes auth_type;
    AuthenticateResultCodes result_code;

    // etc
};

// MLME-AUTHENTICATE.indication (IEEE Std 802.11-2016, 6.3.5.4)

struct AuthenticateIndication {
  array<uint8>:6 peer_sta_address;
  AuthenticationTypes auth_type;

  // etc
};

// MLME-AUTHENTICATE.response (IEEE Std 802.11-2016, 6.3.5.5)

struct AuthenticateResponse {
  array<uint8>:6 peer_sta_address;
  AuthenticateResultCodes result_code;

  // etc
};

// MLME-DEAUTHENTICATE.request (IEEE Std 802.11-2016, 6.3.6.2)

// IEEE Std 802.11-2016, 9.4.1.7, Table 9-45
enum ReasonCode : uint16 {
    // 0 Reserved
    UNSPECIFIED_REASON = 1;
    INVALID_AUTHENTICATION = 2;
    LEAVING_NETWORK_DEAUTH = 3;
    REASON_INACTIVITY = 4;
    NO_MORE_STAS = 5;
    INVALID_CLASS2_FRAME = 6;
    INVALID_CLASS3_FRAME = 7;
    LEAVING_NETWORK_DISASSOC = 8;
    NOT_AUTHENTICATED = 9;
    UNACCEPTABLE_POWER_CA = 10;
    UNACCEPTABLE_SUPPORTED_CHANNELS = 11;
    BSS_TRANSITION_DISASSOC = 12;
    REASON_INVALID_ELEMENT = 13;
    MIC_FAILURE = 14;
    FOURWAY_HANDSHAKE_TIMEOUT = 15;
    GK_HANDSHAKE_TIMEOUT = 16;
    HANDSHAKE_ELEMENT_MISMATCH = 17;
    REASON_INVALID_GROUP_CIPHER = 18;
    REASON_INVALID_PAIRWISE_CIPHER = 19;
    REASON_INVALID_AKMP = 20;
    UNSUPPORTED_RSNE_VERSION = 21;
    INVALID_RSNE_CAPABILITIES = 22;
    IEEE802_1_X_AUTH_FAILED = 23;
    REASON_CIPHER_OUT_OF_POLICY = 24;
    TDLS_PEER_UNREACHABLE = 25;
    TDLS_UNSPECIFIED_REASON = 26;
    SSP_REQUESTED_DISASSOC = 27;
    NO_SSP_ROAMING_AGREEMENT = 28;
    BAD_CIPHER_OR_AKM = 29;
    NOT_AUTHORIZED_THIS_LOCATION = 30;
    SERVICE_CHANGE_PRECLUDES_TS = 31;
    UNSPECIFIED_QOS_REASON = 32;
    NOT_ENOUGH_BANDWIDTH = 33;
    MISSING_ACKS = 34;
    EXCEEDED_TXOP = 35;
    STA_LEAVING = 36;
    // Values 37 and 38 are overloaded but should be clear from context.
    END_TS_BA_DLS = 37;
    UNKNOWN_TS_BA = 38;
    TIMEOUT = 39;
    // 40-44 Reserved
    PEERKEY_MISMATCH = 45;
    PEER_INITIATED = 46;
    AP_INITIATED = 47;
    REASON_INVALID_FT_ACTION_FRAME_COUNT = 48;
    REASON_INVALID_PMKID = 49;
    REASON_INVALID_MDE = 50;
    REASON_INVALID_FTE = 51;
    MESH_PEERING_CANCELED = 52;
    MESH_MAX_PEERS = 53;
    MESH_CONFIGURATION_POLICY_VIOLATION = 54;
    MESH_CLOSE_RCVD = 55;
    MESH_MAX_RETRIES = 56;
    MESH_CONFIRM_TIMEOUT = 57;
    MESH_INVALID_GTK = 58;
    MESH_INCONSISTENT_PARAMETERS = 59;
    MESH_INVALID_SECURITY_CAPABILITY = 60;
    MESH_PATH_ERROR_NO_PROXY_INFORMATION = 61;
    MESH_PATH_ERROR_NO_FORWARDING_INFORMATION = 62;
    MESH_PATH_ERROR_DESTINATION_UNREACHABLE = 63;
    MAC_ADDRESS_ALREADY_EXISTS_IN_MBSS = 64;
    MESH_CHANNEL_SWITCH_REGULATORY_REQUIREMENTS = 65;
    MESH_CHANNEL_SWITCH_UNSPECIFIED = 66;
    // 67 - 65535 Reserved
};

struct DeauthenticateRequest {
    array <uint8>:6 peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    ReasonCode reason_code;
    // VendorSpecificInfo
};

// MLME-DEAUTHENTICATE.confirm (IEEE Std 802.11-2016, 6.3.6.3)

struct DeauthenticateConfirm {
    array <uint8>:6 peer_sta_address;
};

// MLME-DEAUTHENTICATE.indication (IEEE Std 802.11-2016, 6.3.6.4)

struct DeauthenticateIndication {
    array<uint8>:6 peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    ReasonCode reason_code;
    // VendorSpecificInfo
};

// MLME-ASSOCIATE.request (IEEE Std 802.11-2016, 6.3.7.2)

struct AssociateRequest {
    array<uint8>:6 peer_sta_address;
    // TODO(hahnr): This field represents an IE and should thus be named RSNE.
    vector<uint8>? rsn;

    // etc
};

// MLME-ASSOCIATE.confrm (IEEE Std 802.11-2016, 6.3.7.3)

enum AssociateResultCodes {
    SUCCESS = 0;
    REFUSED_REASON_UNSPECIFIED = 1;
    REFUSED_NOT_AUTHENTICATED = 2;
    REFUSED_CAPABILITIES_MISMATCH = 3;
    REFUSED_EXTERNAL_REASON = 4;
    REFUSED_AP_OUT_OF_MEMORY = 5;
    REFUSED_BASIC_RATES_MISMATCH = 6;
    REJECTED_EMERGENCY_SERVICES_NOT_SUPPORTED = 7;
    REFUSED_TEMPORARILY = 8;
};

struct AssociateConfirm {
    AssociateResultCodes result_code;
    // CapabilityInformation
    uint16 association_id;

    // etc
};

// MLME-ASSOCIATE.indication (IEEE Std 802.11-2016, 6.3.7.4)

struct AssociateIndication {
  array<uint8>:6 peer_sta_address;
  // CapabilityInformation
  uint16 listen_interval;
  vector<uint8>? ssid;
  // OperationalRateSet
  // BSSMembershipSelectorSet
  vector<uint8>? rsn;

  // etc
};

// MLME-ASSOCIATE.response (IEEE Std 802.11-2016, 6.3.7.5)

struct AssociateResponse {
  array<uint8>:6 peer_sta_address;
  AssociateResultCodes result_code;
  uint16 association_id;

  // etc
};

// MLME-DISASSOCIATE.request (IEEE Std 802.11-2016, 6.3.9.1)

struct DisassociateRequest {
    array<uint8>:6 peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    uint16 reason_code;
    // VendorSpecificInfo
};

// MLME-DISASSOCIATE.confirm (IEEE Std 802.11-2016, 6.3.9.2)

struct DisassociateConfirm {
    int32 @status;
};

// MLME-DISASSOCIATE.indication (IEEE Std 802.11-2016, 6.3.9.3)

struct DisassociateIndication {
    array<uint8>:6 peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    uint16 reason_code;
    // VendorSpecificInfo
};

// MLME-RESET.request (IEEE Std 802.11-2016, 6.3.10.2)

struct ResetRequest {
    array<uint8>:6 sta_address;
    bool set_default_mib;
};

// MLME-START.request (IEEE Std 802.11-2016, 6.3.11.2)

struct StartRequest {
    string ssid;
    BSSTypes bss_type;
    uint32 beacon_period;
    uint32 dtim_period;

    // Temporary field to support AP channel selection until
    // MLME-CHANNELSWITCH.request is supported.
    uint8 channel;

    // TODO(hahnr): Add additional elements.

    // Although MLME-START.request is used to start a BSS, IEEE does not include an RSNE in this
    // primitive. However, IEEE doesn't define any other primitive to configure the RSN after its
    // BSS was started. The RSNE must be available when the BSS is started, and thus, this is the
    // right place to transfer the RSNE to the MLME.
    vector<uint8>? rsne;
};

// MLME-START.confirm (IEEE Std 802.11-2016, 6.3.11.3)

enum StartResultCodes {
    SUCCESS = 0;
    BSS_ALREADY_STARTED_OR_JOINED = 1;
    RESET_REQUIRED_BEFORE_START = 2;
    NOT_SUPPORTED = 3;
};

struct StartConfirm {
    StartResultCodes result_code;
};

// MLME-STOP.request (IEEE Std 802.11-2016, 6.3.12.2)

struct StopRequest {
    string ssid;
};

// MLME-SETKEYS.request (IEEE Std 802.11-2016 6.3.19.1)


enum KeyType {
    GROUP = 1;
    PAIRWISE = 2;
    PEER_KEY = 3;
    IGTK = 4;
};

struct SetKeyDescriptor {
    // Specs specify a bit string, we use byte array.
    vector<uint8> key;
    uint16 length;
    uint16 key_id;
    KeyType key_type;
    array<uint8>:6 address;
    array<uint8>:8 rsc;
    array<uint8>:3 cipher_suite_oui;
    uint8 cipher_suite_type;
};

struct SetKeysRequest {
    vector<SetKeyDescriptor> keylist;
};

// MLME-DELETEKEYS.request (IEEE Std 802.11-2016 6.3.20.1)

struct DeleteKeyDescriptor {
  uint16 key_id;
  KeyType key_type;
  array<uint8>:6 address;
};

struct DeleteKeysRequest {
  vector<DeleteKeyDescriptor> keylist;
};

// MLME-EAPOL.request (IEEE Std 802.11-2016 6.3.22.1)

struct EapolRequest {
    array<uint8>:6 src_addr;
    array<uint8>:6 dst_addr;
    vector<uint8> data;
};

// MLME-EAPOL.confirm (IEEE Std 802.11-2016 6.3.22.2)

enum EapolResultCodes {
    SUCCESS = 0;
    TRANSMISSION_FAILURE = 1;
    //LAST = TRANSMISSION_FAILURE;
};

struct EapolConfirm {
    EapolResultCodes result_code;
};

// Method ordinals
// To be replaced by FIDL2 interfaces soon.
enum Method {
    // MLME-SCAN.request
    // Args: ScanRequest
    SCAN_request = 1;

    // MLME-SCAN.confirm
    // Args: ScanConfirm
    SCAN_confirm = 2;

    // MLME-JOIN.request
    // Args: JoinRequest
    JOIN_request = 3;

    // MLME-JOIN.confirm
    // Args: JoinConfirm
    JOIN_confirm = 4;

    // MLME-AUTHENTICATE.request
    // Args: AuthenticateRequest
    AUTHENTICATE_request = 5;

    // MLME-AUTHENTICATE.confirm
    // Args: AuthenticateConfirm
    AUTHENTICATE_confirm = 6;

    // MLME-AUTHENTICATE.indication
    // Args: AuthenticateIndication
    AUTHENTICATE_indication = 7;

    // MLME-AUTHENTICATE.response
    // Args: AuthenticateResponse
    AUTHENTICATE_response = 8;

    // MLME-DEAUTHENTICATE.request
    // Args: DeauthenticateRequest
    DEAUTHENTICATE_request = 9;

    // MLME-DEAUTHENTICATE.confirm
    // Args: DeauthenticateConfirm
    DEAUTHENTICATE_confirm = 10;

    // MLME-DEAUTHENTICATE.indication
    // Args: DeauthenticateIndication
    DEAUTHENTICATE_indication = 11;

    // MLME-ASSOCIATE.request
    // Args: AssociateRequest
    ASSOCIATE_request = 12;

    // MLME-ASSOCIATE.confirm
    // Args: AssociateConfirm
    ASSOCIATE_confirm = 13;

    // MLME-ASSOCIATE.indication
    // Args: AssociateIndication
    ASSOCIATE_indication = 14;

    // MLME-ASSOCIATE.response
    // Args: AssociateResponse
    ASSOCIATE_response = 15;

    // MLME-DISASSOCIATE.request
    // Args: DisassociateRequest
    DISASSOCIATE_request = 16;

    // MLME-DISASSOCIATE.confirm
    // Args: DisassociateConfirm
    DISASSOCIATE_confirm = 17;

    // MLME-DISASSOCIATE.indication
    // Args: DisassociateIndication
    DISASSOCIATE_indication = 18;

    // MLME-RESET.request
    // Args: ResetRequest
    RESET_request = 19;

    // MLME-START.request
    // Args: StartRequest
    START_request = 20;

    // MLME-START.confirm
    // Args: StartConfirm
    START_confirm = 21;

    // MLME-STOP.request
    // Args: StopRequest
    STOP_request = 22;

    // MLME-STOP.confirm
    // Args: StopConfirm
    STOP_confirm = 23;

    // MLME-SETKEYS.request
    // Args: SetKeysRequest
    SETKEYS_request = 24;

    // MLME-DELETEKEYS.request
    // Args: DeleteKeysRequest
    DELETEKEYS_request = 25;

    // MLME-EAPOL.request
    // Args: EapolRequest
    EAPOL_request = 26;

    // MLME-EAPOL.confirm
    // Args: EapolConfirm
    EAPOL_confirm = 27;


    // Custom primitives extending 802.11 MLME SAP interface.
    // See: wlan_mlme_ext.fidl

    // Args: SignalReportIndication
    SIGNAL_REPORT_indication = 28;

    // Args: EapolIndication
    EAPOL_indication = 29;

    // Args: DeviceQueryRequest
    DEVICE_QUERY_request = 30;

    // Args: DeviceQueryConfirm
    DEVICE_QUERY_confirm = 31;
};
