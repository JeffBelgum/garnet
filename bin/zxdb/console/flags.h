// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef GARNET_BIN_ZXDB_CONSOLE_FLAGS_H_
#define GARNET_BIN_ZXDB_CONSOLE_FLAGS_H_

#include <string>
#include <vector>

#include "garnet/bin/zxdb/client/err.h"
#include "garnet/public/lib/fxl/command_line.h"

namespace zxdb {

// Right now FlagRecord is very simple and should be expanded to support more
// interesting cases. Things to be added:
// - Support short form (eg. -s)
// - Multiple options
// - Different values (now everything is a string, but could be enforced that a
//   flag expects ints, doubles, etc.
struct FlagRecord {
  FlagRecord(const char* name, const char* long_form, const char* short_form,
             const char* long_help, const char* short_help,
             const char* argument_name, const char* default_value);

  // The name of the flag displayed on the long description
  const char* name;
  // Double-hyphen form (ie. --(*long_form) )
  const char* long_form;
  // One-hyphen short form (ie. -(*short_form) )
  // nullptr means it's not available
  const char* short_form = nullptr;
  const char* long_help;
  const char* short_help;
  const char* argument_name = nullptr;
  const char* default_value = nullptr;
};

// A list of flags can be given to this function in order to set up a list
// of mock flags to be used for testing. If no flags are provided, the default
// set of flags will be used.
//
// NOTE: The flags are generated at the first call of this function and will
//       return that list forever more, even if another set of mock flags are
//       given.
const std::vector<FlagRecord>& SetupFlagsOnce(
    const std::vector<FlagRecord>* mock_flags = nullptr);

// Unique list of all the flags present in the system.
// Will be generated by using the result of SetupFlagsOnce.
const std::vector<FlagRecord>& GetFlags();

// Process the command line given and generates output to be communicated to
// the user. If there is an error parsing the flags, false will be returned
// and out will contain the error message. Successful parsing *may* generate
// output in out, so checking should be made to see if we need to send it to
// the user.
// TODO(donosoc): Generate commands to be utilized by the rest of the system
//                according to the provided flags. This should replace the
//                quit bool currently used.
// TODO(donosoc): Handle positional flags
Err ProcessCommandLine(const fxl::CommandLine&, std::string* out, bool* quit);

}  // namespace zxdb

#endif  // GARNET_BIN_ZXDB_CONSOLE_FLAGS_H_
